tokens,occurrences,hash,value
461,2,116,) data_dict = pos . data_dict data_dict [ "array" ] [ "phase" ] = "false" data_dict [ "volume" ] [ "phase" ] = "false" assert pos . target_utils . pos_bring_up ( data_dict = data_dict ) == True yield pos def teardown_function ( ) : logger . info ( "========== TEAR DOWN AFTER TEST =========" ) assert pos . target_utils . helper . check_system_memory ( ) == True if pos . client . ctrlr_list ( ) [ 1 ] is not None : assert pos . client . nvme_disconnect ( pos . target_utils . ss_temp_list ) == True assert pos . cli . list_array ( ) [ 0 ] == True array_list = list ( pos . cli . array_dict . keys ( ) ) if len ( array_list ) == 0 : logger . info ( "No array found in the config" ) else : for array in array_list : assert pos . cli . info_array ( array_name = array ) [ 0 ] == True if pos . cli . array_dict [ array ] . lower ( ) == "mounted" : assert pos . cli . unmount_array ( array_name = array ) [ 0 ] == True logger . info ( "==========================================" ) def teardown_module ( ) : logger . info ( "========= TEAR DOWN AFTER SESSION ========" ) pos . exit_handler ( expected = True ) def wt_test_multi_array_setup ( array_list : list ) : """<br>    Function to setup the Multi array test environment<br><br>    array_list : List of dict of array configuration.<br>    """ try : if pos . target_utils . helper . check_pos_exit ( ) == True : assert pos . target_utils . pos_bring_up ( data_dict = pos . data_dict ) == True assert pos . cli . reset_devel ( ) [ 0 ] == True assert pos . cli . scan_device ( ) [ 0 ] == True assert pos . cli . list_device ( ) [ 0 ] == True system_disks = pos . cli . system_disks for array in array_list : array_name = array [ "array_name" ] buffer_dev = array [ "buffer_dev" ] raid_type = array [ "raid_type" ] nr_data_drives = array [ "nr_data_drives" ] write_back = array [ "write_back" ] if len ( system_disks ) < ( nr_data_drives ) : pytest . skip ( f "Insufficient disk count {system_disks}. Required                                 minimum {nr_data_drives}" ) data_disk_list = [ system_disks . pop ( 0 ) for i in range ( nr_data_drives ) ] spare_disk_list = [ ] if raid_type . upper ( ) == "NORAID" : raid_type = "no-raid" assert ( pos . cli . create_array ( write_buffer = buffer_dev , data = data_disk_list , spare = spare_disk_list , raid_type = raid_type , array_name = array_name , ) [ 0 ] == True ) assert ( pos . cli . mount_array ( array_name = array_name , write_back = write_back ) [ 0 ] == True ) return True except Exception as e : logger . error ( f "Test setup failed due to {e}" ) traceback . print_exc ( ) return False ,19,84,/root/arun_p/trident/testcase/system_test/array/test_wt_multi_array_journal_disable.py,14,84,/root/arun_p/trident/testcase/system_test/array/test_wt_muti_array_qos_fio.py
396,2,116,@ pytest . fixture ( scope = "session" , autouse = True ) def setup_module ( ) : global pos , raid_type , data_dict , data_store pos = POS ( ) data_store = { } data_dict = pos . data_dict data_dict [ "array" ] [ "phase" ] = "false" data_dict [ "volume" ] [ "phase" ] = "false" assert pos . target_utils . pos_bring_up ( data_dict = data_dict ) == True assert pos . cli . reset_devel ( ) [ 0 ] == True yield pos def teardown_function ( ) : logger . info ( "========== TEAR DOWN AFTER TEST =========" ) assert pos . target_utils . helper . check_system_memory ( ) == True if pos . client . ctrlr_list ( ) [ 1 ] is not None : assert pos . client . nvme_disconnect ( pos . target_utils . ss_temp_list ) == True assert pos . cli . list_array ( ) [ 0 ] == True array_list = list ( pos . cli . array_dict . keys ( ) ) if len ( array_list ) == 0 : logger . info ( "No array found in the config" ) else : for array in array_list : assert pos . cli . info_array ( array_name = array ) [ 0 ] == True if pos . cli . array_dict [ array ] . lower ( ) == "mounted" : assert pos . cli . unmount_array ( array_name = array ) [ 0 ] == True assert pos . cli . reset_devel ( ) [ 0 ] == True assert pos . target_utils . pci_rescan ( ) == True logger . info ( "==========================================" ) def teardown_module ( ) : logger . info ( "========= TEAR DOWN AFTER SESSION ========" ) pos . exit_handler ( expected = True ) raid = { "RAID0" : { "spare" : 0 , "data" : 2 } , "RAID10" : { "spare" : 2 , "data" : 2 } , "no-raid" : { "spare" : 0 , "data" : 1 } , "RAID5" : { "spare" : 1 , "data" : 3 } , } @ pytest . mark . sanity @ pytest . mark . parametrize ( "writeback" , [ True , False ] ) @ pytest . mark . parametrize ( "raid_type" , list ( raid . keys ( ) ) ) @ pytest . mark . parametrize ( "numvol" , [ 1 , 256 ] ) @ pytest . mark . parametrize ( ,41,58,/root/arun_p/trident/testcase/array/test_array_sanity.py,52,58,/root/arun_p/trident/testcase/volume/test_volume_sanity.py
310,2,116,) try : if pos . target_utils . helper . check_pos_exit ( ) == True : assert pos . target_utils . pos_bring_up ( data_dict = pos . data_dict ) == True assert pos . cli . reset_devel ( ) [ 0 ] == True assert pos . cli . scan_device ( ) [ 0 ] == True assert pos . cli . list_device ( ) [ 0 ] == True system_disks = pos . cli . system_disks if len ( system_disks ) < ( nr_data_drives + 1 ) : pytest . skip ( f "Insufficient disk count {system_disks}. Required minimum {nr_data_drives + 1}" ) data_disk_list = [ system_disks . pop ( 0 ) for i in range ( nr_data_drives ) ] array_name = "posarray1" assert ( pos . cli . create_array ( write_buffer = "uram0" , data = data_disk_list , spare = None , raid_type = raid_type , array_name = array_name , ) [ 0 ] == True ) assert pos . cli . mount_array ( array_name = array_name , write_back = False ) [ 0 ] == True assert ( pos . cli . create_volume ( "pos_vol_1" , array_name = array_name , size = "2000gb" ) [ 0 ] == True ) assert pos . target_utils . get_subsystems_list ( ) == True assert pos . cli . list_volume ( array_name = array_name ) [ 0 ] == True ss_list = [ ss for ss in pos . target_utils . ss_temp_list if "subsystem1" in ss ] assert ( pos . target_utils . mount_volume_multiple ( array_name = array_name , volume_list = pos . cli . vols , nqn_list = ss_list ) == True ) for ss in pos . target_utils . ss_temp_list : assert ( pos . client . nvme_connect ( ss , pos . target_utils . helper . ip_addr [ 0 ] , "1158" ) == True ) assert pos . client . nvme_list ( ) == True ,55,47,/root/arun_p/trident/testcase/system_test/array/test_wt_array_GC.py,56,47,/root/arun_p/trident/testcase/system_test/array/test_wt_array_Nvme_flush_io.py
302,2,116,) if pos . target_utils . helper . check_pos_exit ( ) == True : assert pos . target_utils . pos_bring_up ( data_dict = pos . data_dict ) == True assert pos . cli . reset_devel ( ) [ 0 ] == True assert pos . target_utils . pci_rescan ( ) == True assert pos . cli . list_device ( ) [ 0 ] == True datalen = raid [ raid_type ] [ "data" ] sparelen = raid [ raid_type ] [ "spare" ] datalist = pos . cli . dev_type [ "SSD" ] [ 0 : datalen ] sparelist = [ ] if sparelen == 0 else pos . cli . dev_type [ "SSD" ] [ - sparelen : ] assert ( pos . cli . create_array ( array_name = "array1" , data = datalist , write_buffer = pos . cli . dev_type [ "NVRAM" ] [ 0 ] , raid_type = raid_type , spare = sparelist , ) [ 0 ] == True ) array2raid = random . choice ( list ( raid . keys ( ) ) ) datalen = raid [ array2raid ] [ "data" ] sparelen = raid [ array2raid ] [ "spare" ] assert ( pos . cli . autocreate_array ( array_name = "array2" , num_data = datalen , num_spare = sparelen , buffer_name = pos . cli . dev_type [ "NVRAM" ] [ 1 ] , raid = array2raid , ) [ 0 ] == True ) assert pos . cli . list_device ( ) [ 0 ] == True assert pos . target_utils . get_subsystems_list ( ) == True for index , array in enumerate ( [ "array1" , "array2" ] ) : assert ( pos . cli . mount_array ( array_name = array , write_back = writeback ) [ 0 ] == True ) ,107,41,/root/arun_p/trident/testcase/array/test_array_sanity.py,117,42,/root/arun_p/trident/testcase/volume/test_volume_sanity.py
288,2,116,import pytest from pos import POS import logger import random import time logger = logger . get_logger ( __name__ ) @ pytest . fixture ( scope = "session" , autouse = True ) def setup_module ( ) : global pos , data_dict pos = POS ( "wt_array.json" ) data_dict = pos . data_dict assert pos . target_utils . pos_bring_up ( data_dict = data_dict ) == True yield pos def teardown_function ( ) : logger . info ( "========== TEAR DOWN AFTER TEST =========" ) assert pos . target_utils . helper . check_system_memory ( ) == True if pos . client . ctrlr_list ( ) [ 1 ] is not None : assert pos . client . nvme_disconnect ( pos . target_utils . ss_temp_list ) == True assert pos . cli . list_array ( ) [ 0 ] == True array_list = list ( pos . cli . array_dict . keys ( ) ) if len ( array_list ) == 0 : logger . info ( "No array found in the config" ) else : for array in array_list : assert pos . cli . info_array ( array_name = array ) [ 0 ] == True if pos . cli . array_dict [ array ] . lower ( ) == "mounted" : assert pos . cli . unmount_array ( array_name = array ) [ 0 ] == True assert pos . cli . reset_devel ( ) [ 0 ] == True logger . info ( "==========================================" ) def teardown_module ( ) : logger . info ( "========= TEAR DOWN AFTER SESSION ========" ) pos . exit_handler ( expected = True ) @ pytest . mark . regression @ pytest . mark . parametrize ( "raid_type, nr_data_drives" , [ ( "no-raid" , 1 ) , ( "RAID0" , 2 ) , ( "RAID10" , 4 ) ,1,51,/root/arun_p/trident/testcase/system_test/array/test_wt_array_GC.py,1,51,/root/arun_p/trident/testcase/system_test/array/test_wt_array_Nvme_flush_io.py
276,2,116,import pytest from pos import POS import logger import random import time logger = logger . get_logger ( __name__ ) @ pytest . fixture ( scope = "session" , autouse = True ) def setup_module ( ) : global pos , data_dict pos = POS ( "wt_array.json" ) data_dict = pos . data_dict assert pos . target_utils . pos_bring_up ( data_dict = data_dict ) == True yield pos def teardown_function ( ) : logger . info ( "========== TEAR DOWN AFTER TEST =========" ) assert pos . target_utils . helper . check_system_memory ( ) == True if pos . client . ctrlr_list ( ) [ 1 ] is not None : assert pos . client . nvme_disconnect ( pos . target_utils . ss_temp_list ) == True assert pos . cli . list_array ( ) [ 0 ] == True array_list = list ( pos . cli . array_dict . keys ( ) ) if len ( array_list ) == 0 : logger . info ( "No array found in the config" ) else : for array in array_list : assert pos . cli . info_array ( array_name = array ) [ 0 ] == True if pos . cli . array_dict [ array ] . lower ( ) == "mounted" : assert pos . cli . unmount_array ( array_name = array ) [ 0 ] == True assert pos . cli . reset_devel ( ) [ 0 ] == True logger . info ( "==========================================" ) def teardown_module ( ) : logger . info ( "========= TEAR DOWN AFTER SESSION ========" ) pos . exit_handler ( expected = True ) @ pytest . mark . regression @ pytest . mark . parametrize ( "raid_type, nr_data_drives" , [ ( "RAID0" , 2 ) ,1,50,/root/arun_p/trident/testcase/system_test/array/test_wt_array_io_spor.py,1,53,/root/arun_p/trident/testcase/system_test/array/test_wt_wb_mixed_block_file_iotest.py
272,4,116,import pytest from pos import POS import logger import random import time logger = logger . get_logger ( __name__ ) @ pytest . fixture ( scope = "session" , autouse = True ) def setup_module ( ) : global pos , data_dict pos = POS ( "wt_array.json" ) data_dict = pos . data_dict assert pos . target_utils . pos_bring_up ( data_dict = data_dict ) == True yield pos def teardown_function ( ) : logger . info ( "========== TEAR DOWN AFTER TEST =========" ) assert pos . target_utils . helper . check_system_memory ( ) == True if pos . client . ctrlr_list ( ) [ 1 ] is not None : assert pos . client . nvme_disconnect ( pos . target_utils . ss_temp_list ) == True assert pos . cli . list_array ( ) [ 0 ] == True array_list = list ( pos . cli . array_dict . keys ( ) ) if len ( array_list ) == 0 : logger . info ( "No array found in the config" ) else : for array in array_list : assert pos . cli . info_array ( array_name = array ) [ 0 ] == True if pos . cli . array_dict [ array ] . lower ( ) == "mounted" : assert pos . cli . unmount_array ( array_name = array ) [ 0 ] == True assert pos . cli . reset_devel ( ) [ 0 ] == True logger . info ( "==========================================" ) def teardown_module ( ) : logger . info ( "========= TEAR DOWN AFTER SESSION ========" ) pos . exit_handler ( expected = True ) @ pytest . mark . regression @ pytest . mark . parametrize ( "raid_type, nr_data_drives" , [ ( ,1,51,/root/arun_p/trident/testcase/system_test/array/test_wt_array_GC.py,1,50,/root/arun_p/trident/testcase/system_test/array/test_wt_array_io_spor.py,1,51,/root/arun_p/trident/testcase/system_test/array/test_wt_array_Nvme_flush_io.py,1,53,/root/arun_p/trident/testcase/system_test/array/test_wt_wb_mixed_block_file_iotest.py
268,5,116,import pytest from pos import POS import logger import random import time logger = logger . get_logger ( __name__ ) @ pytest . fixture ( scope = "session" , autouse = True ) def setup_module ( ) : global pos , data_dict pos = POS ( "wt_array.json" ) data_dict = pos . data_dict assert pos . target_utils . pos_bring_up ( data_dict = data_dict ) == True yield pos def teardown_function ( ) : logger . info ( "========== TEAR DOWN AFTER TEST =========" ) assert pos . target_utils . helper . check_system_memory ( ) == True if pos . client . ctrlr_list ( ) [ 1 ] is not None : assert pos . client . nvme_disconnect ( pos . target_utils . ss_temp_list ) == True assert pos . cli . list_array ( ) [ 0 ] == True array_list = list ( pos . cli . array_dict . keys ( ) ) if len ( array_list ) == 0 : logger . info ( "No array found in the config" ) else : for array in array_list : assert pos . cli . info_array ( array_name = array ) [ 0 ] == True if pos . cli . array_dict [ array ] . lower ( ) == "mounted" : assert pos . cli . unmount_array ( array_name = array ) [ 0 ] == True assert pos . cli . reset_devel ( ) [ 0 ] == True logger . info ( "==========================================" ) def teardown_module ( ) : logger . info ( "========= TEAR DOWN AFTER SESSION ========" ) pos . exit_handler ( expected = True ) @ pytest . mark . regression @ pytest . mark . parametrize ( ,1,50,/root/arun_p/trident/testcase/system_test/array/test_wt_array_GC.py,1,50,/root/arun_p/trident/testcase/system_test/array/test_wt_array_io_spor.py,1,50,/root/arun_p/trident/testcase/system_test/array/test_wt_array_longIO_Spor_Npor.py,1,50,/root/arun_p/trident/testcase/system_test/array/test_wt_array_Nvme_flush_io.py,1,51,/root/arun_p/trident/testcase/system_test/array/test_wt_wb_mixed_block_file_iotest.py
263,2,116,] phase_time = Time start_time = time . time ( ) assert ( libcore . subsystem_module ( target = target , client = client , data_set = data_set , config_dict = test_dict , action = "create" , phase = phase , ) == True ) logger . info ( "Lock status : acquire {}" . format ( target . cli . lock . acquire ( ) ) ) assert ( libcore . volume_module ( target = target , data_set = data_set , config_dict = test_dict , action = "create" , phase = phase , ) == True ) assert ( libcore . volume_module ( target = target , data_set = data_set , config_dict = test_dict , action = "mount" , phase = phase , ) == True ) logger . info ( "Lock status : release {}" . format ( target . cli . lock . release ( ) ) ) assert target . cli . list_volume ( target . cli . array_name ) [ 0 ] == True assert ( libcore . subsystem_module ( target = target , client = client , data_set = data_set , config_dict = test_dict , action = "connect" , phase = phase , ) == True ) time . sleep ( 5 ) model_name = test_dict [ "phase" ] [ 0 ] [ "volume" ] [ "create" ] [ "basename" ] assert client . nvme_list ( model_name ) == True fio_device = client . nvme_list_out current_time = time . time ( ) while True : logger . info ( "Lock status : acquire {}" . format ( target . cli . lock . acquire ( ) ) ) assert ,160,62,/root/arun_p/trident/lib/composable/io_management.py,31,63,/root/arun_p/trident/lib/composable/system_management.py
260,2,116,] phase_time = Time start_time = time . time ( ) assert ( libcore . subsystem_module ( target = target , client = client , data_set = data_set , config_dict = test_dict , action = "create" , phase = phase , ) == True ) logger . info ( "Lock status : acquire {}" . format ( target . cli . lock . acquire ( ) ) ) assert ( libcore . volume_module ( target = target , data_set = data_set , config_dict = test_dict , action = "create" , phase = phase , ) == True ) assert ( libcore . volume_module ( target = target , data_set = data_set , config_dict = test_dict , action = "mount" , phase = phase , ) == True ) logger . info ( "Lock status : release {}" . format ( target . cli . lock . release ( ) ) ) assert target . cli . list_volume ( target . cli . array_name ) [ 0 ] == True assert ( libcore . subsystem_module ( target = target , client = client , data_set = data_set , config_dict = test_dict , action = "connect" , phase = phase , ) == True ) time . sleep ( 5 ) model_name = test_dict [ "phase" ] [ 0 ] [ "volume" ] [ "create" ] [ "basename" ] assert client . nvme_list ( model_name ) == True fio_device = client . nvme_list_out current_time = time . time ( ) fio_time = phase_time - ( current_time - start_time ) if fio_time < 5 : fio_time = 10 while True : ,28,61,/root/arun_p/trident/lib/composable/io_management.py,359,61,/root/arun_p/trident/lib/composable/vol_management.py
240,4,116,] phase_time = Time start_time = time . time ( ) assert ( libcore . subsystem_module ( target = target , client = client , data_set = data_set , config_dict = test_dict , action = "create" , phase = phase , ) == True ) logger . info ( "Lock status : acquire {}" . format ( target . cli . lock . acquire ( ) ) ) assert ( libcore . volume_module ( target = target , data_set = data_set , config_dict = test_dict , action = "create" , phase = phase , ) == True ) assert ( libcore . volume_module ( target = target , data_set = data_set , config_dict = test_dict , action = "mount" , phase = phase , ) == True ) logger . info ( "Lock status : release {}" . format ( target . cli . lock . release ( ) ) ) assert target . cli . list_volume ( target . cli . array_name ) [ 0 ] == True assert ( libcore . subsystem_module ( target = target , client = client , data_set = data_set , config_dict = test_dict , action = "connect" , phase = phase , ) == True ) time . sleep ( 5 ) model_name = test_dict [ "phase" ] [ 0 ] [ "volume" ] [ "create" ] [ "basename" ] assert client . nvme_list ( model_name ) == True fio_device = client . nvme_list_out current_time = time . time ( ) ,28,56,/root/arun_p/trident/lib/composable/io_management.py,160,58,/root/arun_p/trident/lib/composable/io_management.py,31,58,/root/arun_p/trident/lib/composable/system_management.py,359,56,/root/arun_p/trident/lib/composable/vol_management.py
213,3,116,) data_dict = pos . data_dict data_dict [ "array" ] [ "phase" ] = "false" data_dict [ "volume" ] [ "phase" ] = "false" assert pos . target_utils . pos_bring_up ( data_dict = data_dict ) == True yield pos def teardown_function ( ) : logger . info ( "========== TEAR DOWN AFTER TEST =========" ) assert pos . target_utils . helper . check_system_memory ( ) == True if pos . client . ctrlr_list ( ) [ 1 ] is not None : assert pos . client . nvme_disconnect ( pos . target_utils . ss_temp_list ) == True assert pos . cli . list_array ( ) [ 0 ] == True array_list = list ( pos . cli . array_dict . keys ( ) ) if len ( array_list ) == 0 : logger . info ( "No array found in the config" ) else : for array in array_list : assert pos . cli . info_array ( array_name = array ) [ 0 ] == True if pos . cli . array_dict [ array ] . lower ( ) == "mounted" : assert pos . cli . unmount_array ( array_name = array ) [ 0 ] == True logger . info ( "==========================================" ) def teardown_module ( ) : logger . info ( "========= TEAR DOWN AFTER SESSION ========" ) pos . exit_handler ( expected = True ) ,19,30,/root/arun_p/trident/testcase/system_test/array/test_wt_multi_array_journal_disable.py,14,30,/root/arun_p/trident/testcase/system_test/array/test_wt_muti_array_qos_fio.py,32,32,/root/arun_p/trident/testcase/system_test/hetero_device/test_hetero_playground.py
201,5,116,] phase_time = Time start_time = time . time ( ) assert ( libcore . subsystem_module ( target = target , client = client , data_set = data_set , config_dict = test_dict , action = "create" , phase = phase , ) == True ) logger . info ( "Lock status : acquire {}" . format ( target . cli . lock . acquire ( ) ) ) assert ( libcore . volume_module ( target = target , data_set = data_set , config_dict = test_dict , action = "create" , phase = phase , ) == True ) assert ( libcore . volume_module ( target = target , data_set = data_set , config_dict = test_dict , action = "mount" , phase = phase , ) == True ) logger . info ( "Lock status : release {}" . format ( target . cli . lock . release ( ) ) ) assert target . cli . list_volume ( target . cli . array_name ) [ 0 ] == True assert ( libcore . subsystem_module ( target = target , client = client , data_set = data_set , config_dict = test_dict , action = "connect" , phase = phase , ) == True ) time . sleep ( 5 ) ,28,51,/root/arun_p/trident/lib/composable/io_management.py,160,52,/root/arun_p/trident/lib/composable/io_management.py,31,52,/root/arun_p/trident/lib/composable/system_management.py,30,53,/root/arun_p/trident/lib/composable/vol_management.py,359,51,/root/arun_p/trident/lib/composable/vol_management.py
194,3,116,) assert ( libcore . volume_module ( target = target , data_set = data_set , config_dict = test_dict , action = "create" , phase = phase , ) == True ) assert ( libcore . volume_module ( target = target , data_set = data_set , config_dict = test_dict , action = "mount" , phase = phase , ) == True ) logger . info ( "Lock status : release {}" . format ( target . cli . lock . release ( ) ) ) assert target . cli . list_volume ( target . cli . array_name ) [ 0 ] == True assert ( libcore . subsystem_module ( target = target , client = client , data_set = data_set , config_dict = test_dict , action = "connect" , phase = phase , ) == True ) time . sleep ( 5 ) model_name = test_dict [ "phase" ] [ 0 ] [ "volume" ] [ "create" ] [ "basename" ] assert client . nvme_list ( model_name ) == True fio_device = client . nvme_list_out current_time = time . time ( ) fio_time = phase_time - ( current_time - start_time ) if fio_time < 5 : fio_time = 10 ,44,43,/root/arun_p/trident/lib/composable/io_management.py,279,43,/root/arun_p/trident/lib/composable/vol_management.py,375,43,/root/arun_p/trident/lib/composable/vol_management.py
182,2,116,) [ 0 ] == True ) assert ( pos . cli . list_volume_policy_qos ( volumename = vol , arrayname = array ) [ 0 ] == True ) assert ( pos . target_utils . mount_volume_multiple ( array_name = array , volume_list = pos . cli . vols , nqn_list = [ pos . target_utils . ss_temp_list [ index ] ] , ) == True ) assert ( pos . client . nvme_connect ( pos . target_utils . ss_temp_list [ 0 ] , pos . target_utils . helper . ip_addr [ 0 ] , "1158" , ) == True ) assert pos . client . nvme_list ( ) == True assert ( pos . client . fio_generic_runner ( pos . client . nvme_list_out , fio_user_data = "fio --name=sequential_write --ioengine=libaio --rw=write --iodepth=64 --direct=1 --numjobs=1 --bs=128k --time_based --runtime=10" , ) [ 0 ] == True ) for vol in pos . cli . vols : assert ( pos . cli . reset_volume_policy_qos ( volumename = vol , arrayname = array ) [ 0 ] == True ) except Exception as e : logger . error ( e ) pos . exit_handler ( ) ,159,40,/root/arun_p/trident/testcase/qos/test_qos.py,224,40,/root/arun_p/trident/testcase/qos/test_qos.py
177,3,116,) assert ( libcore . volume_module ( target = target , data_set = data_set , config_dict = test_dict , action = "create" , phase = phase , ) == True ) assert ( libcore . volume_module ( target = target , data_set = data_set , config_dict = test_dict , action = "mount" , phase = phase , ) == True ) logger . info ( "Lock status : release {}" . format ( target . cli . lock . release ( ) ) ) assert target . cli . list_volume ( target . cli . array_name ) [ 0 ] == True assert ( libcore . subsystem_module ( target = target , client = client , data_set = data_set , config_dict = test_dict , action = "connect" , phase = phase , ) == True ) time . sleep ( 5 ) model_name = test_dict [ "phase" ] [ 0 ] [ "volume" ] [ "create" ] [ "basename" ] assert client . nvme_list ( model_name ) == True fio_device = client . nvme_list_out current_time = time . time ( ) ,176,42,/root/arun_p/trident/lib/composable/io_management.py,47,42,/root/arun_p/trident/lib/composable/system_management.py,279,40,/root/arun_p/trident/lib/composable/vol_management.py
166,7,116,== True yield pos def teardown_function ( ) : logger . info ( "========== TEAR DOWN AFTER TEST =========" ) assert pos . target_utils . helper . check_system_memory ( ) == True if pos . client . ctrlr_list ( ) [ 1 ] is not None : assert pos . client . nvme_disconnect ( pos . target_utils . ss_temp_list ) == True assert pos . cli . list_array ( ) [ 0 ] == True array_list = list ( pos . cli . array_dict . keys ( ) ) if len ( array_list ) == 0 : logger . info ( "No array found in the config" ) else : for array in array_list : assert pos . cli . info_array ( array_name = array ) [ 0 ] == True if pos . cli . array_dict [ array ] . lower ( ) == "mounted" : assert pos . cli . unmount_array ( array_name = array ) [ 0 ] == True assert pos . cli . reset_devel ( ) [ 0 ] == True ,53,24,/root/arun_p/trident/testcase/array/test_array_sanity.py,20,21,/root/arun_p/trident/testcase/system_test/array/test_wt_array_GC.py,20,21,/root/arun_p/trident/testcase/system_test/array/test_wt_array_io_spor.py,20,21,/root/arun_p/trident/testcase/system_test/array/test_wt_array_longIO_Spor_Npor.py,20,21,/root/arun_p/trident/testcase/system_test/array/test_wt_array_Nvme_flush_io.py,21,21,/root/arun_p/trident/testcase/system_test/array/test_wt_wb_mixed_block_file_iotest.py,65,23,/root/arun_p/trident/testcase/volume/test_volume_sanity.py
164,8,116,assert pos . target_utils . pos_bring_up ( data_dict = data_dict ) == True yield pos def teardown_function ( ) : logger . info ( "========== TEAR DOWN AFTER TEST =========" ) assert pos . target_utils . helper . check_system_memory ( ) == True if pos . client . ctrlr_list ( ) [ 1 ] is not None : assert pos . client . nvme_disconnect ( pos . target_utils . ss_temp_list ) == True assert pos . cli . list_array ( ) [ 0 ] == True array_list = list ( pos . cli . array_dict . keys ( ) ) if len ( array_list ) == 0 : logger . info ( "No array found in the config" ) else : for array in array_list : assert pos . cli . info_array ( array_name = array ) [ 0 ] == True if pos . cli . array_dict [ array ] . lower ( ) == "mounted" : assert pos . cli . unmount_array ( array_name = array ) [ 0 ] == True ,20,19,/root/arun_p/trident/testcase/system_test/array/test_wt_array_GC.py,20,19,/root/arun_p/trident/testcase/system_test/array/test_wt_array_io_spor.py,20,19,/root/arun_p/trident/testcase/system_test/array/test_wt_array_longIO_Spor_Npor.py,20,19,/root/arun_p/trident/testcase/system_test/array/test_wt_array_Nvme_flush_io.py,23,19,/root/arun_p/trident/testcase/system_test/array/test_wt_multi_array_journal_disable.py,18,19,/root/arun_p/trident/testcase/system_test/array/test_wt_muti_array_qos_fio.py,21,19,/root/arun_p/trident/testcase/system_test/array/test_wt_wb_mixed_block_file_iotest.py,37,20,/root/arun_p/trident/testcase/system_test/hetero_device/test_hetero_playground.py
163,2,116,for dev_type in ( 'mix' , 'any' ) : device_types = [ dev_size for dev_size , dev_list in device_size_dict . items ( ) if dev_list ] device_count = sum ( len ( dev_list ) for dev_list in device_size_dict . values ( ) ) num_device = data_dev_select . get ( dev_type , 0 ) if ( num_device == 0 ) : continue if dev_type == 'mix' and len ( device_types ) < num_device : logger . error ( "Only {} device types are available. But {} are " "required." . format ( len ( device_types ) , num_device ) ) return False , selected_devices elif dev_type == 'any' and device_count < num_device : logger . error ( "Only {} devices are available. But {} are " "required." . format ( device_count , num_device ) ) return False , selected_devices counter = 0 while counter < num_device : for dev_type in device_size_dict . keys ( ) : if counter == num_device : break if device_size_dict [ dev_type ] : dev_name = device_size_dict [ dev_type ] . pop ( 0 ) selected_devices [ ,430,24,/root/arun_p/trident/lib/helper.py,460,24,/root/arun_p/trident/lib/helper.py
161,3,116,) try : if pos . target_utils . helper . check_pos_exit ( ) == True : assert pos . target_utils . pos_bring_up ( data_dict = pos . data_dict ) == True assert pos . cli . reset_devel ( ) [ 0 ] == True assert pos . cli . scan_device ( ) [ 0 ] == True assert pos . cli . list_device ( ) [ 0 ] == True system_disks = pos . cli . system_disks if len ( system_disks ) < ( nr_data_drives + 1 ) : pytest . skip ( f "Insufficient disk count {system_disks}. Required minimum {nr_data_drives + 1}" ) data_disk_list = [ system_disks . pop ( 0 ) for i in range ( nr_data_drives ) ] array_name = "posarray1" assert ( pos . cli . create_array ( write_buffer = "uram0" , data = data_disk_list , spare = None , raid_type = raid_type , array_name = array_name , ) [ 0 ] == True ) assert pos . cli . mount_array ( array_name = array_name ,55,27,/root/arun_p/trident/testcase/system_test/array/test_wt_array_GC.py,67,27,/root/arun_p/trident/testcase/system_test/array/test_wt_array_longIO_Spor_Npor.py,56,27,/root/arun_p/trident/testcase/system_test/array/test_wt_array_Nvme_flush_io.py
153,5,116,== True yield pos def teardown_function ( ) : logger . info ( "========== TEAR DOWN AFTER TEST =========" ) assert pos . target_utils . helper . check_system_memory ( ) == True if pos . client . ctrlr_list ( ) [ 1 ] is not None : assert pos . client . nvme_disconnect ( pos . target_utils . ss_temp_list ) == True assert pos . cli . list_array ( ) [ 0 ] == True array_list = list ( pos . cli . array_dict . keys ( ) ) if len ( array_list ) == 0 : logger . info ( "No array found in the config" ) else : for array in array_list : assert pos . cli . info_array ( array_name = array ) [ 0 ] == True if pos . cli . array_dict [ array ] . lower ( ) == "mounted" : assert pos . cli . unmount_array ( array_name = array ) [ 0 ] == True ,53,22,/root/arun_p/trident/testcase/array/test_array_sanity.py,23,19,/root/arun_p/trident/testcase/system_test/array/test_wt_multi_array_journal_disable.py,18,19,/root/arun_p/trident/testcase/system_test/array/test_wt_muti_array_qos_fio.py,37,20,/root/arun_p/trident/testcase/system_test/hetero_device/test_hetero_playground.py,65,21,/root/arun_p/trident/testcase/volume/test_volume_sanity.py
141,2,116,arrayname = "array1" assert pos . cli . info_array ( array_name = arrayname ) [ 0 ] == True if raid_type not in [ "RAID0" , "no-raid" ] : disklist = [ random . choice ( pos . cli . dev_type [ "SSD" ] ) ] assert pos . target_utils . device_hot_remove ( disklist ) == True assert pos . target_utils . array_rebuild_wait ( array_name = arrayname ) == True assert pos . cli . info_array ( array_name = arrayname ) [ 0 ] == True assert pos . cli . unmount_array ( array_name = arrayname ) [ 0 ] == True assert pos . cli . delete_array ( array_name = arrayname ) [ 0 ] == True assert pos . cli . list_array ( ) [ 0 ] == True except Exception as e : logger . error ( f ,241,19,/root/arun_p/trident/testcase/array/test_array_sanity.py,204,19,/root/arun_p/trident/testcase/volume/test_volume_sanity.py
138,2,116,) assert ( libcore . volume_module ( target = target , data_set = data_set , config_dict = test_dict , action = "create" , phase = phase , ) == True ) assert ( libcore . volume_module ( target = target , data_set = data_set , config_dict = test_dict , action = "mount" , phase = phase , ) == True ) logger . info ( "Lock status : release {}" . format ( target . cli . lock . release ( ) ) ) assert target . cli . list_volume ( target . cli . array_name ) [ 0 ] == True assert ( libcore . subsystem_module ( target = target , client = client , data_set = data_set , config_dict = test_dict , action = "connect" , phase = phase , ) == True ) time . sleep ( 5 ) ,46,37,/root/arun_p/trident/lib/composable/vol_management.py,279,35,/root/arun_p/trident/lib/composable/vol_management.py
132,2,116,) current_time = time . time ( ) running_time = current_time - start_time if running_time >= phase_time : break assert ( libcore . subsystem_module ( target = target , client = client , data_set = data_set , config_dict = test_dict , action = "disconnect" , phase = phase , ) == True ) logger . info ( "Lock status : acquire {}" . format ( target . cli . lock . acquire ( ) ) ) assert ( libcore . volume_module ( target = target , data_set = data_set , config_dict = test_dict , action = "unmount" , phase = phase , ) == True ) assert ( libcore . volume_module ( target = target , data_set = data_set , config_dict = test_dict , action = "delete" , phase = phase , ) == True ) ,174,39,/root/arun_p/trident/lib/composable/vol_management.py,468,38,/root/arun_p/trident/lib/composable/vol_management.py
130,2,116,) assert pos . target_utils . get_subsystems_list ( ) == True assert pos . cli . list_volume ( array_name = array_name ) [ 0 ] == True ss_temp_list = pos . target_utils . ss_temp_list ss_list = [ ss for ss in ss_temp_list if f "subsystem{id + 1}" in ss ] assert ( pos . target_utils . mount_volume_multiple ( array_name = array_name , volume_list = pos . cli . vols , nqn_list = ss_list ) == True ) for ss in pos . target_utils . ss_temp_list : assert ( pos . client . nvme_connect ( ss , pos . target_utils . helper . ip_addr [ 0 ] , "1158" ) == True ) assert pos . client . nvme_list ( ) == True nvme_devs = pos . client . nvme_list_out fio_cmd = f ,148,23,/root/arun_p/trident/testcase/system_test/array/test_wt_multi_array_journal_disable.py,157,23,/root/arun_p/trident/testcase/system_test/array/test_wt_muti_array_qos_fio.py
122,2,116,try : if pos . target_utils . helper . check_pos_exit ( ) == True : assert pos . target_utils . pos_bring_up ( data_dict = pos . data_dict ) == True assert pos . cli . reset_devel ( ) [ 0 ] == True assert pos . cli . scan_device ( ) [ 0 ] == True assert pos . cli . list_device ( ) [ 0 ] == True system_disks = pos . cli . system_disks if len ( system_disks ) < ( nr_data_drives + 1 ) : pytest . skip ( f "Insufficient disk count {system_disks}. Required minimum {nr_data_drives + 1}" ) assert pos . target_utils . get_subsystems_list ( ) == True ss_list = [ ss for ss in pos . target_utils . ss_temp_list if "subsystem" in ss ] ,56,15,/root/arun_p/trident/testcase/system_test/array/test_wt_array_io_spor.py,61,15,/root/arun_p/trident/testcase/system_test/array/test_wt_wb_mixed_block_file_iotest.py
108,11,116,yield pos def teardown_function ( ) : logger . info ( "========== TEAR DOWN AFTER TEST =========" ) assert pos . target_utils . helper . check_system_memory ( ) == True if pos . client . ctrlr_list ( ) [ 1 ] is not None : assert pos . client . nvme_disconnect ( pos . target_utils . ss_temp_list ) == True assert pos . cli . list_array ( ) [ 0 ] == True array_list = list ( pos . cli . array_dict . keys ( ) ) if len ( array_list ) == 0 : logger . info ( "No array found in the config" ) else : for array in array_list : assert pos . cli . ,55,17,/root/arun_p/trident/testcase/array/test_array_sanity.py,52,17,/root/arun_p/trident/testcase/qos/test_qos.py,21,16,/root/arun_p/trident/testcase/system_test/array/test_wt_array_GC.py,21,16,/root/arun_p/trident/testcase/system_test/array/test_wt_array_io_spor.py,21,16,/root/arun_p/trident/testcase/system_test/array/test_wt_array_longIO_Spor_Npor.py,21,16,/root/arun_p/trident/testcase/system_test/array/test_wt_array_Nvme_flush_io.py,24,16,/root/arun_p/trident/testcase/system_test/array/test_wt_multi_array_journal_disable.py,19,16,/root/arun_p/trident/testcase/system_test/array/test_wt_muti_array_qos_fio.py,22,16,/root/arun_p/trident/testcase/system_test/array/test_wt_wb_mixed_block_file_iotest.py,39,16,/root/arun_p/trident/testcase/system_test/hetero_device/test_hetero_playground.py,67,17,/root/arun_p/trident/testcase/volume/test_volume_sanity.py
108,2,116,== True ) assert pos . cli . list_volume ( array_name = array_name ) [ 0 ] == True assert ( pos . target_utils . mount_volume_multiple ( array_name = array_name , volume_list = pos . cli . vols , nqn_list = ss_list ) == True ) for ss in pos . target_utils . ss_temp_list : assert ( pos . client . nvme_connect ( ss , pos . target_utils . helper . ip_addr [ 0 ] , "1158" ) == True ) assert pos . client . nvme_list ( ) == True pos . client . check_system_memory ( ) nvme_devs = pos . client . nvme_list_out fio_cmd = f ,90,24,/root/arun_p/trident/testcase/system_test/array/test_wt_array_io_spor.py,102,24,/root/arun_p/trident/testcase/system_test/array/test_wt_wb_mixed_block_file_iotest.py
100,3,116,) [ 0 ] == True assert ( pos . cli . create_volume ( "pos_vol_1" , array_name = array_name , size = "2000gb" ) [ 0 ] == True ) assert pos . target_utils . get_subsystems_list ( ) == True assert pos . cli . list_volume ( array_name = array_name ) [ 0 ] == True ss_list = [ ss for ss in pos . target_utils . ss_temp_list if "subsystem1" in ss ] assert ( pos . target_utils . mount_volume_multiple ( array_name = array_name , volume_list = pos . cli . vols , nqn_list = ss_list ) == True ) ,81,14,/root/arun_p/trident/testcase/system_test/array/test_wt_array_GC.py,93,14,/root/arun_p/trident/testcase/system_test/array/test_wt_array_longIO_Spor_Npor.py,82,14,/root/arun_p/trident/testcase/system_test/array/test_wt_array_Nvme_flush_io.py
96,11,116,assert pos . cli . list_array ( ) [ 0 ] == True array_list = list ( pos . cli . array_dict . keys ( ) ) if len ( array_list ) == 0 : logger . info ( "No array found in the config" ) else : for array in array_list : assert pos . cli . info_array ( array_name = array ) [ 0 ] == True if pos . cli . array_dict [ array ] . lower ( ) == "mounted" : assert pos . cli . unmount_array ( array_name = array ) [ 0 ] == True ,65,10,/root/arun_p/trident/testcase/array/test_array_sanity.py,150,9,/root/arun_p/trident/testcase/multiverse/test_multi_initiator_ops.py,30,9,/root/arun_p/trident/testcase/system_test/array/test_wt_array_GC.py,30,9,/root/arun_p/trident/testcase/system_test/array/test_wt_array_io_spor.py,30,9,/root/arun_p/trident/testcase/system_test/array/test_wt_array_longIO_Spor_Npor.py,30,9,/root/arun_p/trident/testcase/system_test/array/test_wt_array_Nvme_flush_io.py,33,9,/root/arun_p/trident/testcase/system_test/array/test_wt_multi_array_journal_disable.py,28,9,/root/arun_p/trident/testcase/system_test/array/test_wt_muti_array_qos_fio.py,31,9,/root/arun_p/trident/testcase/system_test/array/test_wt_wb_mixed_block_file_iotest.py,48,9,/root/arun_p/trident/testcase/system_test/hetero_device/test_hetero_playground.py,77,9,/root/arun_p/trident/testcase/volume/test_volume_sanity.py
96,4,116,) try : if pos . target_utils . helper . check_pos_exit ( ) == True : assert pos . target_utils . pos_bring_up ( data_dict = pos . data_dict ) == True assert pos . cli . reset_devel ( ) [ 0 ] == True assert pos . cli . scan_device ( ) [ 0 ] == True assert pos . cli . list_device ( ) [ 0 ] == True system_disks = pos . cli . system_disks if len ( system_disks ) < ( nr_data_drives + 1 ) : pytest . skip ( f "Insufficient disk count {system_disks}. Required minimum {nr_data_drives + 1}" ) ,55,12,/root/arun_p/trident/testcase/system_test/array/test_wt_array_GC.py,55,13,/root/arun_p/trident/testcase/system_test/array/test_wt_array_io_spor.py,67,13,/root/arun_p/trident/testcase/system_test/array/test_wt_array_longIO_Spor_Npor.py,56,12,/root/arun_p/trident/testcase/system_test/array/test_wt_array_Nvme_flush_io.py
95,2,116,, ) [ 0 ] == True ) current_time = time . time ( ) running_time = current_time - start_time if running_time >= phase_time : break bs = test_dict [ "phase" ] [ phase ] [ "io" ] [ "fio" ] [ "bs" ] iod = test_dict [ "phase" ] [ phase ] [ "io" ] [ "fio" ] [ "iodepth" ] assert ( client . fio_generic_runner ( devices = fio_device , fio_user_data = ( "fio  --name=fio_read --rw=read --size={} --ioengine=libaio" " --direct=1 --iodepth={} --bs={} --numjobs=1 --offset=0" " --verify=pattern --verify_pattern={} --do_verify=1" " --continue_on_error=none" " --group_reporting" . format ( fio_size , iod , bs , pattern_data ) ) , json_out = ,104,25,/root/arun_p/trident/lib/composable/io_management.py,280,25,/root/arun_p/trident/lib/composable/io_management.py
95,4,116,try : if pos . target_utils . helper . check_pos_exit ( ) == True : assert pos . target_utils . pos_bring_up ( data_dict = pos . data_dict ) == True assert pos . cli . reset_devel ( ) [ 0 ] == True assert pos . cli . scan_device ( ) [ 0 ] == True assert pos . cli . list_device ( ) [ 0 ] == True system_disks = pos . cli . system_disks if len ( system_disks ) < ( nr_data_drives + 1 ) : pytest . skip ( f "Insufficient disk count {system_disks}. Required minimum {nr_data_drives + 1}" ) ,56,11,/root/arun_p/trident/testcase/system_test/array/test_wt_array_GC.py,68,12,/root/arun_p/trident/testcase/system_test/array/test_wt_array_longIO_Spor_Npor.py,57,11,/root/arun_p/trident/testcase/system_test/array/test_wt_array_Nvme_flush_io.py,61,12,/root/arun_p/trident/testcase/system_test/array/test_wt_wb_mixed_block_file_iotest.py
94,2,116,in ss ] assert ( pos . target_utils . mount_volume_multiple ( array_name = array_name , volume_list = pos . cli . vols , nqn_list = ss_list ) == True ) assert ( pos . client . nvme_connect ( ss_list [ 0 ] , pos . target_utils . helper . ip_addr [ 0 ] , "1158" ) == True ) assert pos . client . nvme_list ( ) == True dev = [ pos . client . nvme_list_out [ 0 ] ] assert pos . client . create_File_system ( dev , fs_format = "xfs" ) ,100,18,/root/arun_p/trident/testcase/system_test/array/test_wt_array_longIO_Spor_Npor.py,166,17,/root/arun_p/trident/testcase/system_test/array/test_wt_array_longIO_Spor_Npor.py
92,2,116,, phase = phase , ) == True ) logger . info ( "Lock status : acquire {}" . format ( target . cli . lock . acquire ( ) ) ) assert ( libcore . volume_module ( target = target , data_set = data_set , config_dict = test_dict , action = "unmount" , phase = phase , ) == True ) assert ( libcore . volume_module ( target = target , data_set = data_set , config_dict = test_dict , action = "delete" , phase = phase , ) == True ) assert ( libcore . ,186,29,/root/arun_p/trident/lib/composable/vol_management.py,252,30,/root/arun_p/trident/lib/composable/vol_management.py
91,2,116,( ) : try : if pos . target_utils . helper . check_pos_exit ( ) == True : assert pos . target_utils . pos_bring_up ( data_dict = pos . data_dict ) == True assert pos . cli . reset_devel ( ) [ 0 ] == True assert pos . target_utils . pci_rescan ( ) == True assert pos . cli . list_device ( ) [ 0 ] == True assert ( pos . cli . create_array ( array_name = "array1" , data = pos . cli . dev_type [ "SSD" ] ,264,11,/root/arun_p/trident/testcase/array/test_array_sanity.py,228,11,/root/arun_p/trident/testcase/volume/test_volume_sanity.py
88,2,116,, phase = phase , ) == True ) logger . info ( "Lock status : acquire {}" . format ( target . cli . lock . acquire ( ) ) ) assert ( libcore . volume_module ( target = target , data_set = data_set , config_dict = test_dict , action = "unmount" , phase = phase , ) == True ) assert ( libcore . volume_module ( target = target , data_set = data_set , config_dict = test_dict , action = "delete" , phase = phase , ) == True ) ,252,28,/root/arun_p/trident/lib/composable/vol_management.py,480,26,/root/arun_p/trident/lib/composable/vol_management.py
84,6,116,] phase_time = Time start_time = time . time ( ) assert ( libcore . subsystem_module ( target = target , client = client , data_set = data_set , config_dict = test_dict , action = "create" , phase = phase , ) == True ) logger . info ( "Lock status : acquire {}" . format ( target . cli . lock . acquire ( ) ) ) assert ( libcore . volume_module ( target = target , data_set = data_set , config_dict = test_dict , action = ,28,23,/root/arun_p/trident/lib/composable/io_management.py,160,23,/root/arun_p/trident/lib/composable/io_management.py,31,23,/root/arun_p/trident/lib/composable/system_management.py,30,24,/root/arun_p/trident/lib/composable/vol_management.py,241,25,/root/arun_p/trident/lib/composable/vol_management.py,359,23,/root/arun_p/trident/lib/composable/vol_management.py
78,2,116,) pattern_data = "0x{}" . format ( pattern_data ) bs = test_dict [ "phase" ] [ phase ] [ "io" ] [ "fio" ] [ "bs" ] iod = test_dict [ "phase" ] [ phase ] [ "io" ] [ "fio" ] [ "iodepth" ] assert ( client . fio_generic_runner ( devices = fio_device , fio_user_data = ( "fio  --name=fio_write --rw=write --size={} --ioengine=libaio" " --direct=1 --iodepth={} --bs={} --numjobs=1 --offset=0" " --verify=pattern --verify_pattern={} --do_verify=1" " --verify_dump=1 --verify_fatal=1 --continue_on_error=none" " --group_reporting" . format ( fio_size , iod , bs , pattern_data ) ) , json_out = ,90,15,/root/arun_p/trident/lib/composable/io_management.py,266,15,/root/arun_p/trident/lib/composable/io_management.py
77,2,116,, phase = phase , ) == True ) logger . info ( "Lock status : release {}" . format ( target . cli . lock . release ( ) ) ) except Exception as e : logger . error ( "Failed due to {}" . format ( e ) ) logger . error ( "Failed test case name : {}" . format ( sys . _getframe ( ) . f_code . co_name ) ) logger . error ( "Failed test stage : {}" . format ( phase + 1 ) ) raise ,320,13,/root/arun_p/trident/lib/composable/io_management.py,219,13,/root/arun_p/trident/lib/composable/vol_management.py
76,2,116,. format ( volumename , arrayname ) cli_error , jout = self . run_cli_command ( cmd , command_type = "qos" ) if cli_error == True : if jout [ "status_code" ] == 0 : return cli_error , jout else : raise Exception ( jout [ "description" ] ) else : raise Exception ( "CLI Error" ) except Exception as e : logger . error ( "failed due to {}" . format ( e ) ) return False , jout def ,1004,14,/root/arun_p/trident/lib/cli.py,1026,15,/root/arun_p/trident/lib/cli.py
76,2,116,. format ( array_name ) cli_error , jout = self . run_cli_command ( cmd , "wbt" ) if cli_error == True : if jout [ "status_code" ] == 0 : logger . info ( jout [ "description" ] ) return True , jout else : raise Exception ( jout [ "description" ] ) else : raise Exception ( "CLI Error" ) except Exception as e : logger . error ( e ) return False , jout def ,1445,15,/root/arun_p/trident/lib/cli.py,1549,15,/root/arun_p/trident/lib/cli.py
76,7,116,try : if pos . target_utils . helper . check_pos_exit ( ) == True : assert pos . target_utils . pos_bring_up ( data_dict = pos . data_dict ) == True assert pos . cli . reset_devel ( ) [ 0 ] == True assert pos . cli . scan_device ( ) [ 0 ] == True assert pos . cli . list_device ( ) [ 0 ] == True system_disks = pos . cli . system_disks ,56,7,/root/arun_p/trident/testcase/system_test/array/test_wt_array_GC.py,56,8,/root/arun_p/trident/testcase/system_test/array/test_wt_array_io_spor.py,68,8,/root/arun_p/trident/testcase/system_test/array/test_wt_array_longIO_Spor_Npor.py,57,7,/root/arun_p/trident/testcase/system_test/array/test_wt_array_Nvme_flush_io.py,57,8,/root/arun_p/trident/testcase/system_test/array/test_wt_multi_array_journal_disable.py,52,8,/root/arun_p/trident/testcase/system_test/array/test_wt_muti_array_qos_fio.py,61,8,/root/arun_p/trident/testcase/system_test/array/test_wt_wb_mixed_block_file_iotest.py
75,2,116,, ) [ 0 ] == True ) current_time = time . time ( ) running_time = current_time - start_time if running_time >= phase_time : break except Exception as e : logger . error ( "Failed due to {}" . format ( e ) ) logger . error ( "Failed test case name : {}" . format ( sys . _getframe ( ) . f_code . co_name ) ) logger . error ( "Failed test stage : {}" . format ( phase + 1 ) ) raise ,128,17,/root/arun_p/trident/lib/composable/io_management.py,244,17,/root/arun_p/trident/lib/composable/system_management.py
75,4,116,in ss ] assert ( pos . target_utils . mount_volume_multiple ( array_name = array_name , volume_list = pos . cli . vols , nqn_list = ss_list ) == True ) for ss in pos . target_utils . ss_temp_list : assert ( pos . client . nvme_connect ( ss , pos . target_utils . helper . ip_addr [ 0 ] , "1158" ) == True ) assert pos . client . nvme_list ( ) == True ,88,14,/root/arun_p/trident/testcase/system_test/array/test_wt_array_GC.py,89,14,/root/arun_p/trident/testcase/system_test/array/test_wt_array_Nvme_flush_io.py,152,15,/root/arun_p/trident/testcase/system_test/array/test_wt_multi_array_journal_disable.py,162,15,/root/arun_p/trident/testcase/system_test/array/test_wt_muti_array_qos_fio.py
74,2,116,array_name ) cli_error , out = self . run_cli_command ( cmd , command_type = "array" ) if cli_error == True : status_code = out [ "status_code" ] if status_code == 0 : return True , out else : raise Exception ( out [ "description" ] ) else : raise Exception ( "CLI Error" ) except Exception as e : logger . error ( "command execution failed with exception {}" . format ( e ) ) return False , out def ,575,16,/root/arun_p/trident/lib/cli.py,601,15,/root/arun_p/trident/lib/cli.py
74,2,116,. format ( devicename ) cli_error , jout = self . run_cli_command ( cmd , command_type = "device" ) if cli_error == True : if jout [ "status_code" ] == 0 : return cli_error , jout else : raise Exception ( jout [ "description" ] ) else : raise Exception ( "CLI Error" ) except Exception as e : logger . error ( "failed due to {}" . format ( e ) ) return False , jout def ,793,14,/root/arun_p/trident/lib/cli.py,814,15,/root/arun_p/trident/lib/cli.py
73,6,116,data_dict = pos . data_dict assert pos . target_utils . pos_bring_up ( data_dict = data_dict ) == True yield pos def teardown_function ( ) : logger . info ( "========== TEAR DOWN AFTER TEST =========" ) assert pos . target_utils . helper . check_system_memory ( ) == True if pos . client . ctrlr_list ( ) [ 1 ] is not None : assert pos . client . nvme_disconnect ( pos . target_utils . ss_temp_list ) == True ,17,12,/root/arun_p/trident/testcase/system_test/array/test_wt_array_GC.py,17,12,/root/arun_p/trident/testcase/system_test/array/test_wt_array_io_spor.py,17,12,/root/arun_p/trident/testcase/system_test/array/test_wt_array_longIO_Spor_Npor.py,17,12,/root/arun_p/trident/testcase/system_test/array/test_wt_array_Nvme_flush_io.py,18,12,/root/arun_p/trident/testcase/system_test/array/test_wt_wb_mixed_block_file_iotest.py,48,13,/root/arun_p/trident/testcase/userio/test_gc.py
72,3,116,) cli_error , jout = self . run_cli_command ( cmd , "wbt" ) if cli_error == True : if jout [ "status_code" ] == 0 : logger . info ( jout [ "description" ] ) return True , jout else : raise Exception ( jout [ "description" ] ) else : raise Exception ( "CLI Error" ) except Exception as e : logger . error ( e ) return False , jout def ,1445,15,/root/arun_p/trident/lib/cli.py,1501,15,/root/arun_p/trident/lib/cli.py,1549,15,/root/arun_p/trident/lib/cli.py
72,3,116,== True ) assert ( pos . client . nvme_connect ( pos . target_utils . ss_temp_list [ 0 ] , pos . target_utils . helper . ip_addr [ 0 ] , "1158" , ) == True ) assert pos . client . nvme_list ( ) == True assert ( pos . client . fio_generic_runner ( pos . client . nvme_list_out , fio_user_data = "fio --name=sequential_write --ioengine=libaio --rw=write --iodepth=64 --direct=1 --numjobs=1 --bs=128k --time_based --runtime=10" , ) [ 0 ] == True ) ,114,18,/root/arun_p/trident/testcase/qos/test_qos.py,172,18,/root/arun_p/trident/testcase/qos/test_qos.py,237,18,/root/arun_p/trident/testcase/qos/test_qos.py
72,6,116,assert ( pos . target_utils . mount_volume_multiple ( array_name = array_name , volume_list = pos . cli . vols , nqn_list = ss_list ) == True ) for ss in pos . target_utils . ss_temp_list : assert ( pos . client . nvme_connect ( ss , pos . target_utils . helper . ip_addr [ 0 ] , "1158" ) == True ) assert pos . client . nvme_list ( ) == True ,89,13,/root/arun_p/trident/testcase/system_test/array/test_wt_array_GC.py,93,14,/root/arun_p/trident/testcase/system_test/array/test_wt_array_io_spor.py,90,13,/root/arun_p/trident/testcase/system_test/array/test_wt_array_Nvme_flush_io.py,153,14,/root/arun_p/trident/testcase/system_test/array/test_wt_multi_array_journal_disable.py,163,14,/root/arun_p/trident/testcase/system_test/array/test_wt_muti_array_qos_fio.py,105,14,/root/arun_p/trident/testcase/system_test/array/test_wt_wb_mixed_block_file_iotest.py
71,2,116,array_name ) cli_error , jout = self . run_cli_command ( cmd , command_type = "volume" ) if cli_error == True : if jout [ "status_code" ] == 0 : return cli_error , jout else : raise Exception ( jout [ "description" ] ) else : raise Exception ( "CLI Error" ) except Exception as e : logger . error ( "failed due to {}" . format ( e ) ) return False , jout def ,1153,15,/root/arun_p/trident/lib/cli.py,1256,14,/root/arun_p/trident/lib/cli.py
70,2,116,else : for array in array_list : if self . name == array : assert self . cli . info_array ( array_name = self . name ) [ 0 ] == True state = self . cli . array_info [ self . name ] [ "state" ] . lower ( ) situation = self . cli . array_info [ self . name ] [ "situation" ] . lower ( ) ,518,6,/root/arun_p/trident/lib/array_state.py,550,6,/root/arun_p/trident/lib/array_state.py
70,3,116,) cli_error , jout = self . run_cli_command ( cmd , command_type = "device" ) if cli_error == True : if jout [ "status_code" ] == 0 : return cli_error , jout else : raise Exception ( jout [ "description" ] ) else : raise Exception ( "CLI Error" ) except Exception as e : logger . error ( "failed due to {}" . format ( e ) ) return False , jout def ,707,14,/root/arun_p/trident/lib/cli.py,793,14,/root/arun_p/trident/lib/cli.py,814,15,/root/arun_p/trident/lib/cli.py
70,3,116,) cli_error , jout = self . run_cli_command ( cmd , command_type = "qos" ) if cli_error == True : if jout [ "status_code" ] == 0 : return cli_error , jout else : raise Exception ( jout [ "description" ] ) else : raise Exception ( "CLI Error" ) except Exception as e : logger . error ( "failed due to {}" . format ( e ) ) return False , jout def ,980,15,/root/arun_p/trident/lib/cli.py,1004,14,/root/arun_p/trident/lib/cli.py,1026,15,/root/arun_p/trident/lib/cli.py
70,5,116,) cli_error , jout = self . run_cli_command ( cmd , command_type = "volume" ) if cli_error == True : if jout [ "status_code" ] == 0 : return cli_error , jout else : raise Exception ( jout [ "description" ] ) else : raise Exception ( "CLI Error" ) except Exception as e : logger . error ( "failed due to {}" . format ( e ) ) return False , jout def ,1154,14,/root/arun_p/trident/lib/cli.py,1178,14,/root/arun_p/trident/lib/cli.py,1232,14,/root/arun_p/trident/lib/cli.py,1256,14,/root/arun_p/trident/lib/cli.py,1288,15,/root/arun_p/trident/lib/cli.py
70,2,116,cli_error , jout = self . run_cli_command ( command , "devel" ) if cli_error == True : if jout [ "status_code" ] == 0 : logger . info ( jout [ "description" ] ) return True , jout else : raise Exception ( jout [ "description" ] ) else : raise Exception ( "CLI Error" ) except Exception as e : logger . error ( e ) return False , jout ,1762,13,/root/arun_p/trident/lib/cli.py,1781,13,/root/arun_p/trident/lib/cli.py
69,2,116,cli_error , jout = self . run_cli_command ( cmd , command_type = "system" ) if cli_error == True : if jout [ "status_code" ] == 0 : return True , jout else : raise Exception ( jout [ "description" ] ) else : raise Exception ( "CLI Error" ) except Exception as e : logger . error ( "failed due to {}" . format ( e ) ) return False , jout def ,300,13,/root/arun_p/trident/lib/cli.py,318,14,/root/arun_p/trident/lib/cli.py
69,2,116,cli_error , jout = self . run_cli_command ( cmd , command_type = "array" ) if cli_error == True : if jout [ "status_code" ] == 0 : return cli_error , jout else : raise Exception ( jout [ "description" ] ) else : raise Exception ( "CLI Error" ) except Exception as e : logger . error ( "failed due to {}" . format ( e ) ) return False , jout def ,398,13,/root/arun_p/trident/lib/cli.py,490,13,/root/arun_p/trident/lib/cli.py
69,2,116,cli_error , jout = self . run_cli_command ( cmd , command_type = "array" ) if cli_error == True : if jout [ "status_code" ] == 0 : return True , jout else : raise Exception ( jout [ "description" ] ) else : raise Exception ( "CLI Error" ) except Exception as e : logger . error ( "failed due to {}" . format ( e ) ) return False , jout def ,426,13,/root/arun_p/trident/lib/cli.py,449,13,/root/arun_p/trident/lib/cli.py
69,4,116,cli_error , jout = self . run_cli_command ( cmd , command_type = "device" ) if cli_error == True : if jout [ "status_code" ] == 0 : return cli_error , jout else : raise Exception ( jout [ "description" ] ) else : raise Exception ( "CLI Error" ) except Exception as e : logger . error ( "failed due to {}" . format ( e ) ) return False , jout def ,670,13,/root/arun_p/trident/lib/cli.py,708,13,/root/arun_p/trident/lib/cli.py,794,13,/root/arun_p/trident/lib/cli.py,815,14,/root/arun_p/trident/lib/cli.py
69,4,116,cli_error , jout = self . run_cli_command ( cmd , command_type = "logger" ) if cli_error == True : if jout [ "status_code" ] == 0 : return cli_error , jout else : raise Exception ( jout [ "description" ] ) else : raise Exception ( "CLI Error" ) except Exception as e : logger . error ( "failed due to {}" . format ( e ) ) return False , jout def ,836,13,/root/arun_p/trident/lib/cli.py,856,13,/root/arun_p/trident/lib/cli.py,875,13,/root/arun_p/trident/lib/cli.py,894,15,/root/arun_p/trident/lib/cli.py
69,2,116,cli_error , jout = self . run_cli_command ( cmd , command_type = "telemetry" ) if cli_error == True : if jout [ "status_code" ] == 0 : return cli_error , jout else : raise Exception ( jout [ "description" ] ) else : raise Exception ( "CLI Error" ) except Exception as e : logger . error ( "failed due to {}" . format ( e ) ) return False , jout def ,915,13,/root/arun_p/trident/lib/cli.py,934,14,/root/arun_p/trident/lib/cli.py
69,2,116,pattern_data = target . cli . helper . generate_pattern ( 8 ) pattern_data = "0x{}" . format ( pattern_data ) bs = test_dict [ "phase" ] [ phase ] [ "io" ] [ "fio" ] [ "bs" ] iod = test_dict [ "phase" ] [ phase ] [ "io" ] [ "fio" ] [ "iodepth" ] assert ( client . fio_generic_runner ( devices = fio_device , fio_user_data = ( ,90,8,/root/arun_p/trident/lib/composable/io_management.py,101,8,/root/arun_p/trident/lib/composable/system_management.py
69,4,116,logger . info ( "Lock status : acquire {}" . format ( target . cli . lock . acquire ( ) ) ) assert ( libcore . volume_module ( target = target , data_set = data_set , config_dict = test_dict , action = "unmount" , phase = phase , ) == True ) assert ( libcore . volume_module ( target = target , data_set = data_set , config_dict = test_dict , action = ,122,17,/root/arun_p/trident/lib/composable/vol_management.py,192,17,/root/arun_p/trident/lib/composable/vol_management.py,258,18,/root/arun_p/trident/lib/composable/vol_management.py,485,17,/root/arun_p/trident/lib/composable/vol_management.py
68,3,116,for array in array_list : if self . name == array : assert self . cli . info_array ( array_name = self . name ) [ 0 ] == True state = self . cli . array_info [ self . name ] [ "state" ] . lower ( ) situation = self . cli . array_info [ self . name ] [ "situation" ] . lower ( ) ,85,5,/root/arun_p/trident/lib/array_state.py,519,5,/root/arun_p/trident/lib/array_state.py,551,5,/root/arun_p/trident/lib/array_state.py
68,2,116,) assert target . cli . info_array ( target . cli . array_name ) [ 0 ] == True num_data_disks = len ( target . cli . array_info [ target . cli . array_name ] [ "data_list" ] ) stripe_size_for_writing = num_data_disks * 256 * 1024 logger . info ( "Lock status : release {}" . format ( target . cli . lock . release ( ) ) ) fio_size = stripe_size_for_writing ,254,10,/root/arun_p/trident/lib/composable/io_management.py,91,10,/root/arun_p/trident/lib/composable/system_management.py
68,4,116,assert pos . target_utils . pos_bring_up ( data_dict = data_dict ) == True yield pos def teardown_function ( ) : logger . info ( "========== TEAR DOWN AFTER TEST =========" ) assert pos . target_utils . helper . check_system_memory ( ) == True if pos . client . ctrlr_list ( ) [ 1 ] is not None : assert pos . client . nvme_disconnect ( pos . target_utils . ss_temp_list ) == True ,23,9,/root/arun_p/trident/testcase/system_test/array/test_wt_multi_array_journal_disable.py,18,9,/root/arun_p/trident/testcase/system_test/array/test_wt_muti_array_qos_fio.py,37,10,/root/arun_p/trident/testcase/system_test/hetero_device/test_hetero_playground.py,51,10,/root/arun_p/trident/testcase/userio/test_gc.py
67,2,116,) : try : if pos . target_utils . helper . check_pos_exit ( ) == True : assert pos . target_utils . pos_bring_up ( data_dict = pos . data_dict ) == True assert pos . cli . list_array ( ) [ 0 ] == True for index , array in enumerate ( list ( pos . cli . array_dict . keys ( ) ) ) : assert ,139,7,/root/arun_p/trident/testcase/qos/test_qos.py,202,7,/root/arun_p/trident/testcase/qos/test_qos.py
66,2,116,] : logger . info ( "Rebuilding was completed before the function was executed." ) self . state [ "next" ] = state self . situation [ "next" ] = situation logger . info ( "--- ARRAY NAME : {}--- OPERATION : {} ---- CHECK ARRAY STATE : PASS (EXPECTED : {}/{}, ACTUAL : {}/{}) -------" . format ( self . name , self . func [ "name" ] , self . state [ "next" ] , self . situation [ "next" ] , state , situation , ) ) return True elif ,575,18,/root/arun_p/trident/lib/array_state.py,626,18,/root/arun_p/trident/lib/array_state.py
65,3,116,: logger . info ( "Rebuilding was completed before the function was executed." ) self . state [ "next" ] = state self . situation [ "next" ] = situation logger . info ( "--- ARRAY NAME : {}--- OPERATION : {} ---- CHECK ARRAY STATE : PASS (EXPECTED : {}/{}, ACTUAL : {}/{}) -------" . format ( self . name , self . func [ "name" ] , self . state [ "next" ] , self . situation [ "next" ] , state , situation , ) ) return True elif ,575,18,/root/arun_p/trident/lib/array_state.py,592,18,/root/arun_p/trident/lib/array_state.py,626,18,/root/arun_p/trident/lib/array_state.py
65,2,116,) cli_error , jout = self . run_cli_command ( cmd , command_type = "subsystem" ) if cli_error == True : if jout [ "status_code" ] == 0 : return cli_error , jout else : raise Exception ( jout [ "description" ] ) else : raise Exception ( "CLI Error" ) except Exception as e : logger . error ( e ) return False , jout def ,1326,14,/root/arun_p/trident/lib/cli.py,1372,14,/root/arun_p/trident/lib/cli.py
64,4,116,if pos . target_utils . helper . check_pos_exit ( ) == True : assert pos . target_utils . pos_bring_up ( data_dict = pos . data_dict ) == True assert pos . cli . reset_devel ( ) [ 0 ] == True assert pos . target_utils . pci_rescan ( ) == True assert pos . cli . list_device ( ) [ 0 ] == True ,108,5,/root/arun_p/trident/testcase/array/test_array_sanity.py,266,5,/root/arun_p/trident/testcase/array/test_array_sanity.py,119,5,/root/arun_p/trident/testcase/volume/test_volume_sanity.py,230,5,/root/arun_p/trident/testcase/volume/test_volume_sanity.py
63,2,116,) self . state [ "next" ] = state self . situation [ "next" ] = situation logger . info ( "--- ARRAY NAME : {}--- OPERATION : {} ---- CHECK ARRAY STATE : PASS (EXPECTED : {}/{}, ACTUAL : {}/{}) -------" . format ( self . name , self . func [ "name" ] , self . state [ "next" ] , self . situation [ "next" ] , state , situation , ) ) return True elif self . situation [ ,595,15,/root/arun_p/trident/lib/array_state.py,611,15,/root/arun_p/trident/lib/array_state.py
63,3,116,assert ( pos . cli . create_array ( write_buffer = "uram0" , data = data_disk_list , spare = None , raid_type = raid_type , array_name = array_name , ) [ 0 ] == True ) assert pos . cli . mount_array ( array_name = array_name , write_back = False ) [ 0 ] == True assert ( pos . cli . create_volume ( ,70,14,/root/arun_p/trident/testcase/system_test/array/test_wt_array_GC.py,146,14,/root/arun_p/trident/testcase/system_test/array/test_wt_array_longIO_Spor_Npor.py,71,14,/root/arun_p/trident/testcase/system_test/array/test_wt_array_Nvme_flush_io.py
62,2,116,import logger from pos import POS logger = logger . get_logger ( __name__ ) @ pytest . fixture ( scope = "session" , autouse = True ) def setup_module ( ) : global pos , raid_type , data_dict , data_store pos = POS ( ) data_store = { } data_dict = pos . data_dict data_dict [ "array" ] [ "phase" ] = ,35,14,/root/arun_p/trident/testcase/array/test_array_sanity.py,34,14,/root/arun_p/trident/testcase/subsystem/test_subsystem_sanity.py
60,3,116,, command_type = "system" ) if cli_error == True : if jout [ "status_code" ] == 0 : return True , jout else : raise Exception ( jout [ "description" ] ) else : raise Exception ( "CLI Error" ) except Exception as e : logger . error ( "failed due to {}" . format ( e ) ) return False , jout def ,222,15,/root/arun_p/trident/lib/cli.py,300,13,/root/arun_p/trident/lib/cli.py,318,14,/root/arun_p/trident/lib/cli.py
60,2,116,) if out [ 0 ] == True : if out [ 1 ] [ "output" ] [ "Response" ] [ "result" ] [ "status" ] [ "code" ] == 0 : flag = True else : flag = False else : logger . warning ( "No array found in the config" ) return False , out [ 1 ] if flag == True : ,517,10,/root/arun_p/trident/lib/cli.py,1095,10,/root/arun_p/trident/lib/cli.py
60,5,116,) if cli_error == True : if jout [ "status_code" ] == 0 : logger . info ( jout [ "description" ] ) return True , jout else : raise Exception ( jout [ "description" ] ) else : raise Exception ( "CLI Error" ) except Exception as e : logger . error ( e ) return False , jout def ,1421,18,/root/arun_p/trident/lib/cli.py,1446,14,/root/arun_p/trident/lib/cli.py,1502,14,/root/arun_p/trident/lib/cli.py,1550,14,/root/arun_p/trident/lib/cli.py,1762,15,/root/arun_p/trident/lib/cli.py
60,3,116,import pytest , json , sys , os , time , random , codecs , re , datetime from random import randint import logger as logger import composable . composable_core as libcore logger = logger . get_logger ( __name__ ) dir_path = os . path . dirname ( os . path . realpath ( __file__ ) ) with open ( ,1,11,/root/arun_p/trident/lib/composable/io_management.py,1,10,/root/arun_p/trident/lib/composable/system_management.py,1,10,/root/arun_p/trident/lib/composable/vol_management.py
59,3,116,) self . state [ "next" ] = state self . situation [ "next" ] = situation logger . info ( "--- ARRAY NAME : {}--- OPERATION : {} ---- CHECK ARRAY STATE : PASS (EXPECTED : {}/{}, ACTUAL : {}/{}) -------" . format ( self . name , self . func [ "name" ] , self . state [ "next" ] , self . situation [ "next" ] , state , situation , ) ) return True elif ,578,15,/root/arun_p/trident/lib/array_state.py,611,15,/root/arun_p/trident/lib/array_state.py,629,15,/root/arun_p/trident/lib/array_state.py
59,5,116,) if cli_error == True : if jout [ "status_code" ] == 0 : logger . info ( jout [ "description" ] ) return True , jout else : raise Exception ( jout [ "description" ] ) else : raise Exception ( "CLI Error" ) except Exception as e : logger . error ( e ) return False , jout ,1421,13,/root/arun_p/trident/lib/cli.py,1446,12,/root/arun_p/trident/lib/cli.py,1502,12,/root/arun_p/trident/lib/cli.py,1550,12,/root/arun_p/trident/lib/cli.py,1781,13,/root/arun_p/trident/lib/cli.py
58,2,116,== self . situation [ "current" ] and self . data_dict [ "array" ] [ "num_array" ] > 1 ) : logger . info ( "Skip the add spare because array has full data device" ) assert ( update_next_status ( state = self . state [ "current" ] , situation = self . situation [ "current" ] , expected = True , ) == True ) elif ,307,13,/root/arun_p/trident/lib/array_state.py,320,13,/root/arun_p/trident/lib/array_state.py
58,5,116,) self . state [ "next" ] = state self . situation [ "next" ] = situation logger . info ( "--- ARRAY NAME : {}--- OPERATION : {} ---- CHECK ARRAY STATE : PASS (EXPECTED : {}/{}, ACTUAL : {}/{}) -------" . format ( self . name , self . func [ "name" ] , self . state [ "next" ] , self . situation [ "next" ] , state , situation , ) ) return True ,578,14,/root/arun_p/trident/lib/array_state.py,595,14,/root/arun_p/trident/lib/array_state.py,611,14,/root/arun_p/trident/lib/array_state.py,629,14,/root/arun_p/trident/lib/array_state.py,648,14,/root/arun_p/trident/lib/array_state.py
58,7,116,, phase = phase , ) == True ) assert ( libcore . volume_module ( target = target , data_set = data_set , config_dict = test_dict , action = "mount" , phase = phase , ) == True ) logger . info ( "Lock status : release {}" . format ( target . cli . lock . release ( ) ) ) ,50,16,/root/arun_p/trident/lib/composable/io_management.py,182,16,/root/arun_p/trident/lib/composable/io_management.py,53,16,/root/arun_p/trident/lib/composable/system_management.py,53,16,/root/arun_p/trident/lib/composable/vol_management.py,128,16,/root/arun_p/trident/lib/composable/vol_management.py,285,16,/root/arun_p/trident/lib/composable/vol_management.py,381,16,/root/arun_p/trident/lib/composable/vol_management.py
58,2,116,logger . info ( "Lock status : acquire {}" . format ( target . cli . lock . acquire ( ) ) ) pattern_data = target . cli . helper . generate_pattern ( 8 ) logger . info ( "Lock status : release {}" . format ( target . cli . lock . release ( ) ) ) pattern_data = "0x{}" . format ( pattern_data ) ,264,4,/root/arun_p/trident/lib/composable/io_management.py,96,4,/root/arun_p/trident/lib/composable/vol_management.py
58,2,116,) pattern_data = "0x{}" . format ( pattern_data ) bs = test_dict [ "phase" ] [ phase ] [ "io" ] [ "fio" ] [ "bs" ] iod = test_dict [ "phase" ] [ phase ] [ "io" ] [ "fio" ] [ "iodepth" ] assert ( client . fio_generic_runner ( devices = fio_device , fio_user_data = ( ,266,8,/root/arun_p/trident/lib/composable/io_management.py,101,8,/root/arun_p/trident/lib/composable/system_management.py
57,3,116,== True yield pos def teardown_function ( ) : logger . info ( "========== TEAR DOWN AFTER TEST =========" ) assert pos . target_utils . helper . check_system_memory ( ) == True if pos . client . ctrlr_list ( ) [ 1 ] is not None : assert pos . client . nvme_disconnect ( pos . target_utils . ss_temp_list ) == True ,53,11,/root/arun_p/trident/testcase/array/test_array_sanity.py,51,10,/root/arun_p/trident/testcase/userio/test_gc.py,65,11,/root/arun_p/trident/testcase/volume/test_volume_sanity.py
56,5,116,) if cli_error == True : if jout [ "status_code" ] == 0 : return True , jout else : raise Exception ( jout [ "description" ] ) else : raise Exception ( "CLI Error" ) except Exception as e : logger . error ( "failed due to {}" . format ( e ) ) return False , jout def ,222,15,/root/arun_p/trident/lib/cli.py,300,13,/root/arun_p/trident/lib/cli.py,318,14,/root/arun_p/trident/lib/cli.py,426,13,/root/arun_p/trident/lib/cli.py,449,13,/root/arun_p/trident/lib/cli.py
56,20,116,) if cli_error == True : if jout [ "status_code" ] == 0 : return cli_error , jout else : raise Exception ( jout [ "description" ] ) else : raise Exception ( "CLI Error" ) except Exception as e : logger . error ( "failed due to {}" . format ( e ) ) return False , jout def ,398,13,/root/arun_p/trident/lib/cli.py,490,13,/root/arun_p/trident/lib/cli.py,670,13,/root/arun_p/trident/lib/cli.py,708,13,/root/arun_p/trident/lib/cli.py,794,13,/root/arun_p/trident/lib/cli.py,815,14,/root/arun_p/trident/lib/cli.py,836,13,/root/arun_p/trident/lib/cli.py,856,13,/root/arun_p/trident/lib/cli.py,875,13,/root/arun_p/trident/lib/cli.py,894,15,/root/arun_p/trident/lib/cli.py,915,13,/root/arun_p/trident/lib/cli.py,934,14,/root/arun_p/trident/lib/cli.py,982,13,/root/arun_p/trident/lib/cli.py,1005,13,/root/arun_p/trident/lib/cli.py,1027,14,/root/arun_p/trident/lib/cli.py,1155,13,/root/arun_p/trident/lib/cli.py,1179,13,/root/arun_p/trident/lib/cli.py,1233,13,/root/arun_p/trident/lib/cli.py,1257,13,/root/arun_p/trident/lib/cli.py,1289,14,/root/arun_p/trident/lib/cli.py
55,2,116,for array in array_list : assert self . cli . mount_array ( array_name = array ) [ 0 ] == True assert self . cli . list_volume ( array_name = array ) [ 0 ] == True if len ( self . cli . vols ) == 0 : logger . info ( "No volumes found" ) ,1077,5,/root/arun_p/trident/lib/target_utils.py,1183,5,/root/arun_p/trident/lib/target_utils.py
55,2,116,) assert pos . cli . list_volume ( array_name = array ) [ 0 ] == True assert ( pos . target_utils . mount_volume_multiple ( array_name = array , volume_list = pos . cli . vols , nqn_list = [ pos . target_utils . ss_temp_list [ index ] ] , ) == True ) for ,154,11,/root/arun_p/trident/testcase/array/test_array_sanity.py,169,12,/root/arun_p/trident/testcase/volume/test_volume_sanity.py
55,2,116,yield pos def teardown_function ( ) : logger . info ( "========== TEAR DOWN AFTER TEST =========" ) assert pos . target_utils . helper . check_system_memory ( ) == True if pos . client . ctrlr_list ( ) [ 1 ] is not None : assert pos . client . nvme_disconnect ( pos . target_utils . ss_temp_list ) == True ,52,9,/root/arun_p/trident/testcase/qos/test_qos.py,52,9,/root/arun_p/trident/testcase/userio/test_gc.py
54,4,116,] , pos . target_utils . helper . ip_addr [ 0 ] , "1158" , ) == True ) assert pos . client . nvme_list ( ) == True assert ( pos . client . fio_generic_runner ( pos . client . nvme_list_out , fio_user_data = "fio --name=sequential_write --ioengine=libaio --rw=write --iodepth=64 --direct=1 --numjobs=1 --bs=128k --time_based --runtime=10" , ) [ 0 ] == True ) ,118,14,/root/arun_p/trident/testcase/qos/test_qos.py,176,14,/root/arun_p/trident/testcase/qos/test_qos.py,241,14,/root/arun_p/trident/testcase/qos/test_qos.py,105,14,/root/arun_p/trident/testcase/userio/test_gc.py
54,4,116,, array_name = array_name , size = "2000gb" ) [ 0 ] == True ) assert pos . target_utils . get_subsystems_list ( ) == True assert pos . cli . list_volume ( array_name = array_name ) [ 0 ] == True ss_list = [ ss for ss in pos . target_utils . ss_temp_list if ,83,6,/root/arun_p/trident/testcase/system_test/array/test_wt_array_GC.py,95,6,/root/arun_p/trident/testcase/system_test/array/test_wt_array_longIO_Spor_Npor.py,159,8,/root/arun_p/trident/testcase/system_test/array/test_wt_array_longIO_Spor_Npor.py,84,6,/root/arun_p/trident/testcase/system_test/array/test_wt_array_Nvme_flush_io.py
53,3,116,( target = None , client = None , phase = None , data_set = None , Time = None ) : try : if ( target == None or client == None or phase == None or data_set == None or Time == None ) : raise AssertionError test_dict = tc_dict [ ,15,14,/root/arun_p/trident/lib/composable/io_management.py,147,14,/root/arun_p/trident/lib/composable/io_management.py,16,14,/root/arun_p/trident/lib/composable/system_management.py
53,2,116,assert pos . cli . list_array ( ) [ 0 ] == True array_list = list ( pos . cli . array_dict . keys ( ) ) if len ( array_list ) == 0 : logger . info ( "No array found in the config" ) else : for array in array_list : assert pos . cli . ,150,7,/root/arun_p/trident/testcase/multiverse/test_multi_initiator_ops.py,62,7,/root/arun_p/trident/testcase/qos/test_qos.py
52,2,116,: assert ( update_next_status ( state = "offline" , situation = "default" , expected = True ) == True ) else : assert ( update_next_status ( state = self . state [ "current" ] , situation = self . situation [ "current" ] , expected = False , ) == True ) ,387,16,/root/arun_p/trident/lib/array_state.py,464,16,/root/arun_p/trident/lib/array_state.py
52,2,116,, test_dict [ "phase" ] [ phase ] [ "io" ] [ "fio" ] [ "size" ] , test_dict [ "phase" ] [ phase ] [ "io" ] [ "fio" ] [ "iodepth" ] , test_dict [ "phase" ] [ phase ] [ "io" ] [ "fio" ] [ "bs" ] , ,330,4,/root/arun_p/trident/lib/composable/vol_management.py,430,4,/root/arun_p/trident/lib/composable/vol_management.py
52,2,116,== True ) except Exception as e : logger . error ( "Failed due to {}" . format ( e ) ) logger . error ( "Failed test case name : {}" . format ( sys . _getframe ( ) . f_code . co_name ) ) logger . error ( "Failed test stage : {}" . format ( phase + 1 ) ) raise ,339,9,/root/arun_p/trident/lib/composable/vol_management.py,516,9,/root/arun_p/trident/lib/composable/vol_management.py
52,2,116,== True assert self . cli . list_array ( ) [ 0 ] == True array_list = list ( self . cli . array_dict . keys ( ) ) if len ( array_list ) == 0 : logger . info ( "No Array Present in the config" ) return False else : for array in array_list : ,1035,8,/root/arun_p/trident/lib/target_utils.py,1070,8,/root/arun_p/trident/lib/target_utils.py
52,4,116,, data = data_disk_list , spare = None , raid_type = raid_type , array_name = array_name , ) [ 0 ] == True ) assert pos . cli . mount_array ( array_name = array_name , write_back = False ) [ 0 ] == True assert ( pos . cli . create_volume ( ,72,12,/root/arun_p/trident/testcase/system_test/array/test_wt_array_GC.py,79,11,/root/arun_p/trident/testcase/system_test/array/test_wt_array_io_spor.py,148,12,/root/arun_p/trident/testcase/system_test/array/test_wt_array_longIO_Spor_Npor.py,73,12,/root/arun_p/trident/testcase/system_test/array/test_wt_array_Nvme_flush_io.py
52,2,116,data_disk_list = [ system_disks . pop ( 0 ) for i in range ( nr_data_drives ) ] assert ( pos . cli . create_array ( write_buffer = uram , data = data_disk_list , spare = None , raid_type = raid_type , array_name = array_name , ) [ 0 ] == True ) ,75,12,/root/arun_p/trident/testcase/system_test/array/test_wt_array_io_spor.py,81,12,/root/arun_p/trident/testcase/system_test/array/test_wt_wb_mixed_block_file_iotest.py
51,2,116,) except Exception as e : logger . error ( "Failed due to {}" . format ( e ) ) logger . error ( "Failed test case name : {}" . format ( sys . _getframe ( ) . f_code . co_name ) ) logger . error ( "Failed test stage : {}" . format ( phase + 1 ) ) raise def ,224,11,/root/arun_p/trident/lib/composable/vol_management.py,340,11,/root/arun_p/trident/lib/composable/vol_management.py
51,2,116,for id , array_name in enumerate ( ( array_name1 , array_name2 ) ) : assert pos . cli . info_array ( array_name = array_name ) [ 0 ] == True array_size = int ( pos . cli . array_info [ array_name ] . get ( "size" ) ) vol_size = f ,137,4,/root/arun_p/trident/testcase/system_test/array/test_wt_multi_array_journal_disable.py,144,5,/root/arun_p/trident/testcase/system_test/array/test_wt_muti_array_qos_fio.py
50,2,116,: assert ( update_next_status ( state = "busy" , situation = "rebuilding" , expected = True ) == True ) self . device [ "rebuild" ] = "" . join ( self . device [ "spare" ] [ - 1 ] ) else : assert ( update_next_status ( state = ,229,12,/root/arun_p/trident/lib/array_state.py,445,12,/root/arun_p/trident/lib/array_state.py
50,3,116,except Exception as e : logger . error ( "Failed due to {}" . format ( e ) ) logger . error ( "Failed test case name : {}" . format ( sys . _getframe ( ) . f_code . co_name ) ) logger . error ( "Failed test stage : {}" . format ( phase + 1 ) ) raise def ,138,10,/root/arun_p/trident/lib/composable/io_management.py,225,10,/root/arun_p/trident/lib/composable/vol_management.py,341,10,/root/arun_p/trident/lib/composable/vol_management.py
50,4,116,) except Exception as e : logger . error ( "Failed due to {}" . format ( e ) ) logger . error ( "Failed test case name : {}" . format ( sys . _getframe ( ) . f_code . co_name ) ) logger . error ( "Failed test stage : {}" . format ( phase + 1 ) ) raise ,325,8,/root/arun_p/trident/lib/composable/io_management.py,224,8,/root/arun_p/trident/lib/composable/vol_management.py,340,8,/root/arun_p/trident/lib/composable/vol_management.py,517,8,/root/arun_p/trident/lib/composable/vol_management.py
